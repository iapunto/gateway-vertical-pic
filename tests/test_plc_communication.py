#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de comunicaci√≥n con PLCs para el Gateway Local
"""

import sys
import os
import json
import time

# A√±adir el directorio src al path para importaciones
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))


def test_plc_factory():
    """Test de la f√°brica de PLCs"""
    print("üß™ Test de PLC Factory...")

    from plc.plc_factory import PLCFactory
    from plc.delta_plc import DeltaPLC

    # Crear PLC Delta
    plc = PLCFactory.create_plc("delta", "127.0.0.1", 3200)
    assert isinstance(plc, DeltaPLC), "Deber√≠a crear una instancia de DeltaPLC"
    print("‚úÖ PLC Factory funciona correctamente")

    # Verificar tipos soportados
    from plc.plc_factory import PLC_TYPES
    supported_types = list(PLC_TYPES.keys())
    assert "delta" in supported_types, "Delta deber√≠a estar en tipos soportados"
    print(f"‚úÖ Tipos soportados: {supported_types}")


def test_delta_plc_initialization():
    """Test de inicializaci√≥n de PLC Delta"""
    print("\nüß™ Test de inicializaci√≥n de PLC Delta...")

    from plc.delta_plc import DeltaPLC

    plc = DeltaPLC("127.0.0.1", 3200)

    assert plc.ip == "127.0.0.1", "IP deber√≠a ser 127.0.0.1"
    assert plc.port == 3200, "Puerto deber√≠a ser 3200"
    assert plc.socket is None, "Socket deber√≠a ser None inicialmente"
    assert not plc.is_connected(), "No deber√≠a estar conectado inicialmente"

    print("‚úÖ Inicializaci√≥n de PLC Delta correcta")


def test_plc_interface_compliance():
    """Test de cumplimiento de interface PLC"""
    print("\nüß™ Test de cumplimiento de interface PLC...")

    from interfaces.plc_interface import PLCInterface
    from plc.delta_plc import DeltaPLC
    import inspect

    # Verificar que DeltaPLC implementa todos los m√©todos abstractos
    plc = DeltaPLC("127.0.0.1", 3200)

    # Obtener m√©todos abstractos de la interface
    abstract_methods = PLCInterface.__abstractmethods__

    # Verificar que todos los m√©todos abstractos est√°n implementados
    for method_name in abstract_methods:
        method = getattr(plc, method_name, None)
        assert method is not None, f"M√©todo {method_name} no implementado"
        assert callable(method), f"M√©todo {method_name} no es callable"

    print("‚úÖ Cumplimiento de interface PLC verificado")


def test_config_manager():
    """Test del gestor de configuraci√≥n"""
    print("\nüß™ Test de gestor de configuraci√≥n...")

    from config.config_manager import ConfigManager

    # Crear config manager con configuraci√≥n por defecto
    config_manager = ConfigManager()

    # Verificar configuraci√≥n b√°sica
    gateway_config = config_manager.get("gateway")
    assert gateway_config is not None, "Configuraci√≥n de gateway deber√≠a existir"
    assert "id" in gateway_config, "Configuraci√≥n deber√≠a tener ID"

    # Verificar lista de PLCs
    plc_list = config_manager.get_plc_list()
    assert isinstance(plc_list, list), "Lista de PLCs deber√≠a ser una lista"

    print("‚úÖ Gestor de configuraci√≥n funciona correctamente")


def main():
    """Funci√≥n principal de tests"""
    print("üöÄ Iniciando tests de comunicaci√≥n con PLCs")
    print("=" * 50)

    try:
        test_plc_factory()
        test_delta_plc_initialization()
        test_plc_interface_compliance()
        test_config_manager()

        print("\n" + "=" * 50)
        print("üéâ Todos los tests PASARON exitosamente!")
        print("‚úÖ El gateway est√° listo para comunicaci√≥n con PLCs")

    except Exception as e:
        print(f"\n‚ùå Test FALLIDO: {e}")
        import traceback
        traceback.print_exc()
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
